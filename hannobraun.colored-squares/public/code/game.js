// Generated by CoffeeScript 1.3.1
(function() {

  window.module = function(moduleName, dependencyNames, moduleFactory) {
    if (window.modules == null) {
      window.modules = {};
    }
    if (window.modules[moduleName] == null) {
      return window.modules[moduleName] = {
        name: moduleName,
        dependencyNames: dependencyNames,
        factory: moduleFactory
      };
    } else {
      throw "Module " + moduleName + " is already defined.";
    }
  };

  window.load = function(moduleName, loadedModules) {
    var dependencies, dependencyName, module;
    if (window.modules == null) {
      throw "No modules have been defined.";
    }
    if (window.modules[moduleName] == null) {
      throw "A module called " + moduleName + " does not exist.";
    }
    if (loadedModules == null) {
      loadedModules = {};
    }
    if (loadedModules[moduleName] == null) {
      module = window.modules[moduleName];
      dependencies = (function() {
        var _i, _len, _ref, _results;
        _ref = module.dependencyNames;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dependencyName = _ref[_i];
          if (modules[dependencyName] == null) {
            throw ("A module called \"" + dependencyName + "\" (defined as a ") + ("dependency in \"" + moduleName + "\") does not exist.");
          }
          _results.push(load(dependencyName, loadedModules));
        }
        return _results;
      })();
      loadedModules[moduleName] = module.factory.apply(void 0, dependencies);
    }
    return loadedModules[moduleName];
  };

  module("Transform2d", [], function() {
    var module;
    return module = {
      identityMatrix: function() {
        return [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
      },
      translationMatrix: function(v) {
        return [[1, 0, v[0]], [0, 1, v[1]], [0, 0, 1]];
      },
      rotationMatrix: function(angle) {
        return [[Math.cos(angle), -Math.sin(angle), 0], [Math.sin(angle), Math.cos(angle), 0], [0, 0, 1]];
      },
      scalingMatrix: function(factor) {
        return [[factor, 0, 0], [0, factor, 0], [0, 0, 1]];
      }
    };
  });

  module("Entities", [], function() {
    var module;
    return module = {
      createEntity: function(factories, components, type, args) {
        var component, componentName, entity, factory, _ref, _results;
        factory = factories[type];
        if (factory == null) {
          throw "Entity type \"" + type + "\" is not known.";
        }
        entity = factory(args);
        _ref = entity.components;
        _results = [];
        for (componentName in _ref) {
          component = _ref[componentName];
          if (components[componentName] == null) {
            components[componentName] = {};
          }
          _results.push(components[componentName][entity.id] = component);
        }
        return _results;
      },
      destroyEntity: function(components, entityId) {
        var componentMap, componentType, _results;
        _results = [];
        for (componentType in components) {
          componentMap = components[componentType];
          _results.push(delete componentMap[entityId]);
        }
        return _results;
      }
    };
  });

  module("Images", [], function() {
    var module;
    return module = {
      loadImages: function(imagePaths, onLoad) {
        var image, imagePath, images, numberOfImagesToLoad, _i, _len, _results;
        images = {};
        numberOfImagesToLoad = imagePaths.length;
        _results = [];
        for (_i = 0, _len = imagePaths.length; _i < _len; _i++) {
          imagePath = imagePaths[_i];
          image = new Image;
          images[imagePath] = image;
          image.onload = function() {
            numberOfImagesToLoad -= 1;
            if (numberOfImagesToLoad === 0) {
              return onLoad(images);
            }
          };
          _results.push(image.src = imagePath);
        }
        return _results;
      },
      process: function(rawImages) {
        var imageId, images, rawImage;
        images = {};
        for (imageId in rawImages) {
          rawImage = rawImages[imageId];
          images[imageId] = {
            rawImage: rawImage,
            positionOffset: [-rawImage.width / 2, -rawImage.height / 2],
            orientationOffset: 0
          };
        }
        return images;
      }
    };
  });

  module("VelocityVerletIntegrator", ["Vec2"], function(Vec2) {
    var module;
    return module = {
      integrate: function(bodies, passedTimeInS) {
        var body, entityId, force, movementFromAcceleration, movementFromVelocity, newAcceleration, velocityChange, _i, _len, _ref, _results;
        _results = [];
        for (entityId in bodies) {
          body = bodies[entityId];
          newAcceleration = [0, 0];
          _ref = body.forces;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            force = _ref[_i];
            Vec2.scale(force, 1 / body.mass);
            Vec2.add(newAcceleration, force);
          }
          body.forces.length = 0;
          movementFromVelocity = Vec2.copy(body.velocity);
          Vec2.scale(movementFromVelocity, passedTimeInS);
          movementFromAcceleration = Vec2.copy(body.acceleration);
          Vec2.scale(movementFromAcceleration, 0.5);
          Vec2.scale(movementFromAcceleration, passedTimeInS * passedTimeInS);
          Vec2.add(body.position, movementFromVelocity);
          Vec2.add(body.position, movementFromAcceleration);
          velocityChange = Vec2.copy(body.acceleration);
          Vec2.add(velocityChange, newAcceleration);
          Vec2.scale(velocityChange, 0.5);
          Vec2.scale(velocityChange, passedTimeInS);
          Vec2.add(body.velocity, velocityChange);
          _results.push(body.acceleration = newAcceleration);
        }
        return _results;
      }
    };
  });

  module("EulerIntegrator", ["Vec2"], function(Vec2) {
    var module;
    return module = {
      integrate: function(bodies, passedTimeInS) {
        var body, entityId, force, newAcceleration, positionChange, velocityChange, _i, _len, _ref, _results;
        _results = [];
        for (entityId in bodies) {
          body = bodies[entityId];
          newAcceleration = [0, 0];
          _ref = body.forces;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            force = _ref[_i];
            Vec2.scale(force, 1 / body.mass);
            Vec2.add(newAcceleration, force);
          }
          body.forces.length = 0;
          body.acceleration = newAcceleration;
          velocityChange = Vec2.copy(body.acceleration);
          Vec2.scale(velocityChange, passedTimeInS);
          Vec2.add(body.velocity, velocityChange);
          positionChange = Vec2.copy(body.velocity);
          Vec2.scale(positionChange, passedTimeInS);
          _results.push(Vec2.add(body.position, positionChange));
        }
        return _results;
      }
    };
  });

  module("CollisionResponse", ["Vec2"], function(Vec2) {
    var module;
    return module = {
      handleContacts: function(contacts, bodies, parameters) {
        var b, bodyA, bodyB, contact, damping, force, k, negativeForce, relativeVelocity, spring, _i, _len, _results;
        k = parameters.k;
        b = parameters.b;
        _results = [];
        for (_i = 0, _len = contacts.length; _i < _len; _i++) {
          contact = contacts[_i];
          bodyA = bodies[contact.bodyIds[0]];
          bodyB = bodies[contact.bodyIds[1]];
          relativeVelocity = Vec2.copy(bodyA.velocity);
          Vec2.subtract(relativeVelocity, bodyB.velocity);
          spring = Vec2.copy(contact.normal);
          Vec2.scale(spring, -k * contact.depth);
          damping = Vec2.copy(contact.normal);
          Vec2.scale(damping, b * Vec2.dot(contact.normal, relativeVelocity));
          force = Vec2.copy(spring);
          Vec2.add(force, damping);
          Vec2.scale(force, 0.5);
          negativeForce = Vec2.copy(force);
          Vec2.scale(negativeForce, -1);
          bodyA.forces.push(force);
          _results.push(bodyB.forces.push(negativeForce));
        }
        return _results;
      }
    };
  });

  module("Physics", ["Vec2"], function(Vec2) {
    var module;
    return module = {
      parameters: {
        collisionResponse: {
          k: 10000,
          b: 0
        }
      },
      createBody: function() {
        var body;
        return body = {
          position: [0, 0],
          velocity: [0, 0],
          acceleration: [0, 0],
          orientation: 0,
          angularVelocity: 0,
          forces: [],
          mass: 1
        };
      },
      integrateOrientation: function(bodies, passedTimeInS) {
        var body, entityId, _results;
        _results = [];
        for (entityId in bodies) {
          body = bodies[entityId];
          _results.push(body.orientation += body.angularVelocity * passedTimeInS);
        }
        return _results;
      },
      update: function(bodies, passedTimeInS, integrate) {
        integrate(bodies, passedTimeInS);
        return module.integrateOrientation(bodies, passedTimeInS);
      }
    };
  });

  module("CollisionDetection", ["Vec2"], function(Vec2) {
    var module;
    return module = {
      createCircle: function(radius) {
        var shape;
        return shape = {
          type: "circle",
          radius: radius
        };
      },
      buildPairs: function(shapes) {
        var entityIdA, entityIdB, entityUsed, pairs, shapeA, shapeB;
        entityUsed = {};
        pairs = [];
        for (entityIdA in shapes) {
          shapeA = shapes[entityIdA];
          entityUsed[entityIdA] = true;
          for (entityIdB in shapes) {
            shapeB = shapes[entityIdB];
            if (!entityUsed[entityIdB]) {
              pairs.push([entityIdA, entityIdB]);
            }
          }
        }
        return pairs;
      },
      checkCollisions: function(potentialPairs, bodies, shapes) {
        var collision, contacts, d, distance, normal, pair, penetrationDepth, point, positionA, positionB, shapeA, shapeB, sumOfRadii, _i, _len;
        contacts = [];
        for (_i = 0, _len = potentialPairs.length; _i < _len; _i++) {
          pair = potentialPairs[_i];
          positionA = bodies[pair[0]].position;
          positionB = bodies[pair[1]].position;
          shapeA = shapes[0];
          shapeB = shapes[1];
          sumOfRadii = shapeA.radius + shapeB.radius;
          d = Vec2.copy(positionB);
          Vec2.subtract(d, positionA);
          distance = Vec2.length(d);
          collision = sumOfRadii >= distance;
          if (collision) {
            normal = Vec2.copy(d);
            Vec2.normalize(normal);
            penetrationDepth = sumOfRadii - distance;
            point = Vec2.copy(normal);
            Vec2.scale(point, shapeA.radius - penetrationDepth / 2);
            Vec2.add(point, positionA);
            contacts.push({
              bodyIds: pair,
              normal: normal,
              depth: penetrationDepth,
              point: point
            });
          }
        }
        return contacts;
      }
    };
  });

  module("Rendering", [], function() {
    var module;
    return module = {
      drawFunctions: {
        "image": function(renderable, context, image) {
          context.translate(renderable.position[0], renderable.position[1]);
          context.rotate(renderable.orientation + image.orientationOffset);
          context.translate(image.positionOffset[0], image.positionOffset[1]);
          return context.drawImage(image.rawImage, 0, 0);
        },
        "circle": function(renderable, context, shape) {
          context.translate(renderable.position[0], renderable.position[1]);
          context.rotate(renderable.orientation);
          context.translate(shape.offset[0], shape.offset[1]);
          context.beginPath();
          context.arc(0, 0, shape.circle.radius, 0, Math.PI * 2, true);
          return context.stroke();
        },
        "filledCircle": function(renderable, context, circle) {
          context.fillStyle = circle.color;
          context.beginPath();
          context.arc(renderable.position[0], renderable.position[1], circle.radius, 0, 2 * Math.PI, false);
          context.fill();
          return context.closePath();
        },
        "ellipse": function(renderable, context, ellipse) {
          context.strokeStyle = ellipse.color;
          context.translate(renderable.position[0], renderable.position[1]);
          context.rotate(renderable.orientation);
          context.scale(ellipse.semiMajorAxis / ellipse.semiMinorAxis, 1);
          context.beginPath();
          context.arc(0, 0, ellipse.semiMinorAxis, 0, 2 * Math.PI, false);
          context.stroke();
          return context.closePath();
        },
        "rectangle": function(renderable, context, rectangle) {
          context.fillStyle = rectangle.color || "rgb(255,255,255)";
          return context.fillRect(renderable.position[0], renderable.position[1], rectangle.size[0], rectangle.size[1]);
        },
        "rectangleOutline": function(renderable, context, rectangle) {
          context.lineWidth = rectangle.lineWidth || 1;
          context.strokeStyle = rectangle.color || "rgb(0,0,0)";
          return context.strokeRect(renderable.position[0], renderable.position[1], rectangle.size[0], rectangle.size[1]);
        },
        "line": function(renderable, context, line) {
          context.strokeStyle = line.color || "rgb(255,255,255)";
          context.beginPath();
          context.moveTo(line.start[0], line.start[1]);
          context.lineTo(line.end[0], line.end[1]);
          context.closePath();
          return context.stroke();
        },
        "text": function(renderable, context, text) {
          var xPos, yPos;
          context.fillStyle = text.textColor || "rgb(0,0,0)";
          if (text.font != null) {
            context.font = text.font;
          }
          if (text.bold != null) {
            context.font = "bold " + context.font;
          }
          xPos = text.centered[0] ? renderable.position[0] - context.measureText(text.string).width / 2 : renderable.position[0];
          yPos = text.centered[1] ? renderable.position[1] + text.size / 2 : renderable.position[1];
          return context.fillText(text.string, xPos, yPos);
        }
      },
      createDisplay: function() {
        var canvas, context, display;
        canvas = document.getElementById("canvas");
        context = canvas.getContext("2d");
        context.translate(canvas.width / 2, canvas.height / 2);
        return display = {
          canvas: canvas,
          context: context,
          size: [canvas.width, canvas.height]
        };
      },
      createRenderable: function(type) {
        var renderable;
        return renderable = {
          type: type,
          resourceId: null,
          resource: null,
          position: [0, 0],
          orientation: 0
        };
      },
      render: function(drawFunctions, display, renderData, renderables) {
        var context, drawRenderable, height, renderable, resource, type, width, _i, _len, _results;
        context = display.context;
        width = display.size[0];
        height = display.size[1];
        context.clearRect(-width / 2, -height / 2, width, height);
        _results = [];
        for (_i = 0, _len = renderables.length; _i < _len; _i++) {
          renderable = renderables[_i];
          context.save();
          type = renderable.type;
          resource = renderable.resource != null ? renderable.resource : renderData[type][renderable.resourceId];
          if (resource == null) {
            throw "Resource " + renderable.resourceId + " does not exist.";
          }
          drawRenderable = drawFunctions[type];
          drawRenderable(renderable, context, resource);
          _results.push(context.restore());
        }
        return _results;
      }
    };
  });

  module("Events", [], function() {
    var module, publishToSubscribersOfEvent, publishToSubscribersOfSubject;
    publishToSubscribersOfEvent = function(subscribersByTopic, topic, event) {
      if (subscribersByTopic != null) {
        publishToSubscribersOfSubject(subscribersByTopic[topic], event);
        return publishToSubscribersOfSubject(subscribersByTopic[module.anyTopic], event);
      }
    };
    publishToSubscribersOfSubject = function(subscribersOfTopic, event) {
      var subscriber, _i, _len, _results;
      if (subscribersOfTopic != null) {
        _results = [];
        for (_i = 0, _len = subscribersOfTopic.length; _i < _len; _i++) {
          subscriber = subscribersOfTopic[_i];
          _results.push(subscriber(event));
        }
        return _results;
      }
    };
    return module = {
      anyEvent: "any event",
      anyTopic: "any topic",
      createSubscribers: function() {
        return {};
      },
      subscribe: function(subscribers, eventType, topics, subscriber) {
        var subscribersByTopic, subscribersOfTopic, topic, _i, _len;
        if (!(topics instanceof Array)) {
          throw "You must specify an array of topics.";
        }
        subscribersByTopic = subscribers[eventType];
        if (subscribersByTopic == null) {
          subscribersByTopic = {};
        }
        for (_i = 0, _len = topics.length; _i < _len; _i++) {
          topic = topics[_i];
          subscribersOfTopic = subscribersByTopic[topic];
          if (subscribersOfTopic == null) {
            subscribersOfTopic = [];
          }
          subscribersOfTopic.push(subscriber);
          subscribersByTopic[topic] = subscribersOfTopic;
        }
        return subscribers[eventType] = subscribersByTopic;
      },
      publish: function(subscribers, eventType, topic, event) {
        publishToSubscribersOfEvent(subscribers[eventType], topic, event);
        return publishToSubscribersOfEvent(subscribers[module.anyEvent], topic, event);
      }
    };
  });

  module("MainLoop", [], function() {
    var defaultCallNextFrame, maxPassedTimeInMs, module;
    maxPassedTimeInMs = 1000 / 30;
    defaultCallNextFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(f) {
      return window.setTimeout(function() {
        return f(Date.now());
      }, 1000 / 60);
    };
    return module = {
      execute: function(f, callNextFrame) {
        var mainLoop, previousTimeInMs;
        callNextFrame = callNextFrame || defaultCallNextFrame;
        previousTimeInMs = null;
        mainLoop = function(currentTimeInMs) {
          var currentTimeInS, passedTimeInMs, passedTimeInS;
          passedTimeInMs = currentTimeInMs - previousTimeInMs;
          previousTimeInMs = currentTimeInMs;
          passedTimeInMs = Math.min(passedTimeInMs, maxPassedTimeInMs);
          currentTimeInS = currentTimeInMs / 1000;
          passedTimeInS = passedTimeInMs / 1000;
          f(currentTimeInS, passedTimeInS);
          return callNextFrame(mainLoop);
        };
        return callNextFrame(mainLoop);
      }
    };
  });

  module("Input", [], function() {
    var ensureKeyNameIsValid, keyCode, keyCodesByName, keyName, keyNameArrayToKeyCodeSet, keyNamesByCode, module, mouseKeyCodesByName, mouseKeyNamesByCode, updatePointerPosition;
    keyNamesByCode = {
      8: "backspace",
      9: "tab",
      13: "enter",
      16: "shift",
      17: "ctrl",
      18: "alt",
      19: "pause",
      20: "caps lock",
      27: "escape",
      32: "space",
      33: "page up",
      34: "page down",
      35: "end",
      36: "home",
      37: "left arrow",
      38: "up arrow",
      39: "right arrow",
      40: "down arrow",
      45: "insert",
      46: "delete",
      48: "0",
      49: "1",
      50: "2",
      51: "3",
      52: "4",
      53: "5",
      54: "6",
      55: "7",
      56: "8",
      57: "9",
      65: "a",
      66: "b",
      67: "c",
      68: "d",
      69: "e",
      70: "f",
      71: "g",
      72: "h",
      73: "i",
      74: "j",
      75: "k",
      76: "l",
      77: "m",
      78: "n",
      79: "o",
      80: "p",
      81: "q",
      82: "r",
      83: "s",
      84: "t",
      85: "u",
      86: "v",
      87: "w",
      88: "x",
      89: "y",
      90: "z",
      91: "left window key",
      92: "right window key",
      93: "select key",
      96: "numpad 0",
      97: "numpad 1",
      98: "numpad 2",
      99: "numpad 3",
      100: "numpad 4",
      101: "numpad 5",
      102: "numpad 6",
      103: "numpad 7",
      104: "numpad 8",
      105: "numpad 9",
      106: "multiply",
      107: "add",
      109: "subtract",
      110: "decimal point",
      111: "divide",
      112: "f1",
      113: "f2",
      114: "f3",
      115: "f4",
      116: "f5",
      117: "f6",
      118: "f7",
      119: "f8",
      120: "f9",
      121: "f10",
      122: "f11",
      123: "f12",
      144: "num lock",
      145: "scroll lock",
      186: "semi-colon",
      187: "equal sign",
      188: "comma",
      189: "dash",
      190: "period",
      191: "forward slash",
      192: "grave accent",
      219: "open bracket",
      220: "back slash",
      221: "close braket",
      222: "single quote"
    };
    mouseKeyNamesByCode = {
      0: "left mouse button",
      1: "middle mouse button",
      2: "right mouse button"
    };
    keyCodesByName = {};
    for (keyCode in keyNamesByCode) {
      keyName = keyNamesByCode[keyCode];
      keyCodesByName[keyName] = parseInt(keyCode);
    }
    mouseKeyCodesByName = {};
    for (keyCode in mouseKeyNamesByCode) {
      keyName = mouseKeyNamesByCode[keyCode];
      mouseKeyCodesByName[keyName] = parseInt(keyCode);
    }
    ensureKeyNameIsValid = function(keyName) {
      if (!((keyCodesByName[keyName] != null) || (mouseKeyCodesByName[keyName] != null))) {
        throw "\"" + keyName + "\" is not a valid key name.";
      }
    };
    keyNameArrayToKeyCodeSet = function(keyNameArray) {
      var keyCodeSet, keyName, _i, _len;
      keyCodeSet = {};
      for (_i = 0, _len = keyNameArray.length; _i < _len; _i++) {
        keyName = keyNameArray[_i];
        keyCode = keyCodesByName[keyName];
        keyCodeSet[keyCode] = true;
      }
      return keyCodeSet;
    };
    updatePointerPosition = function(pointerPosition, display, event) {
      var element, left, top;
      element = display.canvas;
      left = 0;
      top = 0;
      while (element != null) {
        left += element.offsetLeft;
        top += element.offsetTop;
        element = element.offsetParent;
      }
      pointerPosition[0] = event.clientX - left + window.pageXOffset;
      pointerPosition[1] = event.clientY - top + window.pageYOffset;
      pointerPosition[0] -= display.size[0] / 2;
      return pointerPosition[1] -= display.size[1] / 2;
    };
    return module = {
      keyNamesByCode: keyNamesByCode,
      mouseKeyNamesByCode: mouseKeyNamesByCode,
      keyCodesByName: keyCodesByName,
      mouseKeyCodesByName: mouseKeyCodesByName,
      preventDefaultFor: function(keyNames) {
        var keyCodeSet;
        keyCodeSet = keyNameArrayToKeyCodeSet(keyNames);
        return window.addEventListener("keydown", function(keyDownEvent) {
          if (keyCodeSet[keyDownEvent.keyCode]) {
            return keyDownEvent.preventDefault();
          }
        });
      },
      createCurrentInput: function(display) {
        var currentInput;
        currentInput = {
          pressedKeys: {},
          pointerPosition: [0, 0]
        };
        window.addEventListener("keydown", function(keyDownEvent) {
          keyName = keyNamesByCode[keyDownEvent.keyCode];
          return currentInput.pressedKeys[keyName] = true;
        });
        window.addEventListener("keyup", function(keyUpEvent) {
          keyName = keyNamesByCode[keyUpEvent.keyCode];
          return currentInput.pressedKeys[keyName] = false;
        });
        window.addEventListener("mousedown", function(event) {
          keyName = mouseKeyNamesByCode[event.button];
          return currentInput.pressedKeys[keyName] = true;
        });
        window.addEventListener("mouseup", function(event) {
          keyName = mouseKeyNamesByCode[event.button];
          return currentInput.pressedKeys[keyName] = false;
        });
        display.canvas.addEventListener("mousemove", function(mouseMoveEvent) {
          return updatePointerPosition(currentInput.pointerPosition, display, mouseMoveEvent);
        });
        return currentInput;
      },
      onKeys: function(keyNames, callback) {
        var keysOfInterest;
        keysOfInterest = keyNameArrayToKeyCodeSet(keyNames);
        return window.addEventListener("keydown", function(keyDownEvent) {
          if (keysOfInterest[keyDownEvent.keyCode]) {
            keyName = keyNamesByCode[keyDownEvent.keyCode];
            return callback(keyName, keyDownEvent);
          }
        });
      },
      isKeyDown: function(currentInput, keyName) {
        ensureKeyNameIsValid(keyName);
        return currentInput.pressedKeys[keyName] === true;
      }
    };
  });

  module("Vec2", [], function() {
    var module;
    return module = {
      copy: function(v) {
        return [v[0], v[1]];
      },
      overwrite: function(v1, v2) {
        v1[0] = v2[0];
        return v1[1] = v2[1];
      },
      equals: function(v1, v2) {
        return v1[0] === v2[0] && v1[1] === v2[1];
      },
      scale: function(v, s) {
        v[0] *= s;
        return v[1] *= s;
      },
      add: function(v1, v2) {
        v1[0] += v2[0];
        return v1[1] += v2[1];
      },
      subtract: function(v1, v2) {
        v1[0] -= v2[0];
        return v1[1] -= v2[1];
      },
      dot: function(v1, v2) {
        return v1[0] * v2[0] + v1[1] * v2[1];
      },
      length: function(v) {
        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
      },
      squaredLength: function(v) {
        return v[0] * v[0] + v[1] * v[1];
      },
      normalize: function(v) {
        var length;
        length = module.length(v);
        v[0] /= length;
        return v[1] /= length;
      },
      orthogonal: function(v) {
        var x, y;
        x = v[0];
        y = v[1];
        v[0] = -y;
        return v[1] = x;
      },
      applyTransform: function(v, t) {
        var x, y;
        x = v[0], y = v[1];
        v[0] = x * t[0][0] + y * t[0][1] + 1 * t[0][2];
        return v[1] = x * t[1][0] + y * t[1][1] + 1 * t[1][2];
      }
    };
  });

  module("Camera", ["Mat3x3", "Vec2", "Transform2d"], function(Mat3x3, Vec2, Transform2d) {
    var module;
    return module = {
      createCamera: function() {
        var camera;
        return camera = {
          position: [0, 0],
          rotation: 0,
          zoomFactor: 1
        };
      },
      transformRenderables: function(camera, renderables) {
        var offset, r, renderable, s, t, transform, _i, _len, _results;
        offset = Vec2.copy(camera.position);
        Vec2.scale(offset, -1);
        transform = Transform2d.identityMatrix();
        t = Transform2d.translationMatrix(offset);
        r = Transform2d.rotationMatrix(camera.rotation);
        s = Transform2d.scalingMatrix(camera.zoomFactor);
        Mat3x3.multiply(transform, s);
        Mat3x3.multiply(transform, r);
        Mat3x3.multiply(transform, t);
        _results = [];
        for (_i = 0, _len = renderables.length; _i < _len; _i++) {
          renderable = renderables[_i];
          _results.push(Vec2.applyTransform(renderable.position, transform));
        }
        return _results;
      }
    };
  });

  module("Mat3x3", [], function() {
    var module;
    return module = {
      multiply: function(m1, m2) {
        var m00, m01, m02, m10, m11, m12, m20, m21, m22;
        m00 = m1[0][0];
        m01 = m1[0][1];
        m02 = m1[0][2];
        m10 = m1[1][0];
        m11 = m1[1][1];
        m12 = m1[1][2];
        m20 = m1[2][0];
        m21 = m1[2][1];
        m22 = m1[2][2];
        m1[0][0] = m00 * m2[0][0] + m01 * m2[1][0] + m02 * m2[2][0];
        m1[0][1] = m00 * m2[0][1] + m01 * m2[1][1] + m02 * m2[2][1];
        m1[0][2] = m00 * m2[0][2] + m01 * m2[1][2] + m02 * m2[2][2];
        m1[1][0] = m10 * m2[0][0] + m11 * m2[1][0] + m12 * m2[2][0];
        m1[1][1] = m10 * m2[0][1] + m11 * m2[1][1] + m12 * m2[2][1];
        m1[1][2] = m10 * m2[0][2] + m11 * m2[1][2] + m12 * m2[2][2];
        m1[2][0] = m20 * m2[0][0] + m21 * m2[1][0] + m22 * m2[2][0];
        m1[2][1] = m20 * m2[0][1] + m21 * m2[1][1] + m22 * m2[2][1];
        return m1[2][2] = m20 * m2[0][2] + m21 * m2[1][2] + m22 * m2[2][2];
      }
    };
  });

  module("MyModule", [], function() {
    var module;
    return module = {
      itIsAwesome: true
    };
  });

  module("Logic", ["Input", "Entities", "Vec2"], function(Input, Entities, Vec2) {
    var blockSquares, checkLoseCondition, createEntity, destroyEntity, entityFactories, launchNext, module, nextEntityId, refillNext, removeFullColumns, removeSquares;
    nextEntityId = 0;
    entityFactories = {
      "myEntity": function(args) {
        var entity, id, movement;
        movement = {
          center: args.center,
          radius: args.radius,
          speed: args.speed
        };
        id = nextEntityId;
        nextEntityId += 1;
        return entity = {
          id: id,
          components: {
            "positions": [0, 0],
            "movements": movement,
            "imageIds": "images/star.png"
          }
        };
      }
    };
    createEntity = null;
    destroyEntity = null;
    module = {
      createGameState: function() {
        var gameState;
        return gameState = {
          next: {
            numberOfSquares: 3,
            offset: 3,
            squares: []
          },
          launchNext: false,
          grid: [],
          lost: false,
          reset: false,
          score: 0,
          components: {}
        };
      },
      initGameState: function(gameState) {
        var grid, next, x, y, _i, _j;
        createEntity = function(type, args) {
          return Entities.createEntity(entityFactories, gameState.components, type, args);
        };
        destroyEntity = function(entityId) {
          return Entities.destroyEntity(gameState.components, entityId);
        };
        grid = gameState.grid;
        next = gameState.next;
        for (x = _i = 0; _i < 9; x = ++_i) {
          grid[x] = [];
          for (y = _j = 0; _j < 9; y = ++_j) {
            grid[x][y] = "empty";
          }
        }
        Input.onKeys(["left arrow"], function() {
          next.offset -= 1;
          return next.offset = Math.max(0, next.offset);
        });
        Input.onKeys(["right arrow"], function() {
          next.offset += 1;
          return next.offset = Math.min(grid.length - next.squares.length, next.offset);
        });
        Input.onKeys(["space", "down arrow"], function() {
          if (!gameState.lost) {
            return gameState.launchNext = true;
          }
        });
        return Input.onKeys(["enter"], function() {
          return gameState.reset = gameState.lost;
        });
      },
      updateGameState: function(gameState, currentInput, timeInS, passedTimeInS) {
        refillNext(gameState.next);
        launchNext(gameState, gameState.next, gameState.grid);
        blockSquares(gameState.grid);
        removeSquares(gameState, gameState.grid);
        removeFullColumns(gameState.grid, gameState.next);
        return checkLoseCondition(gameState, gameState.grid);
      }
    };
    refillNext = function(next) {
      var i, possibleSquares, randomIndex, randomSquare, _i, _ref, _results;
      if (next.squares.length === 0) {
        _results = [];
        for (i = _i = 0, _ref = next.numberOfSquares; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          possibleSquares = ["red", "green"];
          randomIndex = Math.floor(Math.random() * possibleSquares.length);
          randomSquare = possibleSquares[randomIndex];
          _results.push(next.squares[i] = randomSquare);
        }
        return _results;
      }
    };
    launchNext = function(gameState, next, grid) {
      var cell, i, square, x, y, _i, _j, _len, _len1, _ref, _ref1;
      if (gameState.launchNext) {
        gameState.launchNext = false;
        _ref = next.squares;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          square = _ref[i];
          x = i + next.offset;
          y = -1;
          _ref1 = grid[x];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            cell = _ref1[_j];
            if (cell === "empty") {
              y += 1;
            }
          }
          grid[x][y] = square;
          if (y > 0) {
            gameState.score += 1;
          }
        }
        return next.squares.length = 0;
      }
    };
    blockSquares = function(grid) {
      var square, topSquare, x, y, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = grid.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        topSquare = null;
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = grid[0].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            square = grid[x][y];
            if (topSquare === null && square !== "empty") {
              topSquare = square;
            }
            if (topSquare !== null && square !== topSquare) {
              _results1.push(grid[x][y] = "blocked");
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    removeSquares = function(gameState, grid) {
      var remove, removedSquares, secondSquare, square, topSquare, x, y, _i, _j, _ref, _ref1, _results;
      _results = [];
      for (x = _i = 0, _ref = grid.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        topSquare = grid[x][0];
        if (topSquare !== "empty") {
          secondSquare = grid[x][1];
          remove = topSquare === secondSquare;
          removedSquares = 0;
          for (y = _j = 0, _ref1 = grid[x].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            square = grid[x][y];
            remove = remove && square === topSquare;
            if (remove) {
              grid[x][y] = "empty";
              removedSquares += 1;
            }
          }
          _results.push(gameState.score += removedSquares * removedSquares);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    removeFullColumns = function(grid, next) {
      var column, columnsToRemove, columnsWereRemoved, currentY, nextFreeY, noMoreColumnsToRemove, square, topSquare, x, xToRemove, _i, _j, _len, _len1, _results;
      columnsWereRemoved = false;
      if (grid.length > next.numberOfSquares) {
        noMoreColumnsToRemove = false;
        while (!noMoreColumnsToRemove) {
          columnsToRemove = [];
          for (x = _i = 0, _len = grid.length; _i < _len; x = ++_i) {
            column = grid[x];
            topSquare = column[0];
            if (topSquare !== "empty") {
              columnsToRemove.push(x);
            }
          }
          if (columnsToRemove.length > 0) {
            xToRemove = columnsToRemove.shift();
            grid.splice(xToRemove, 1);
            columnsWereRemoved = true;
            noMoreColumnsToRemove = columnsToRemove.length === 0 || grid.length === 3;
          } else {
            noMoreColumnsToRemove = true;
          }
        }
      }
      if (next.offset + next.numberOfSquares > grid.length) {
        next.offset = grid.length - next.numberOfSquares;
      }
      if (columnsWereRemoved) {
        _results = [];
        for (_j = 0, _len1 = grid.length; _j < _len1; _j++) {
          column = grid[_j];
          currentY = column.length - 1;
          nextFreeY = column.length - 1;
          _results.push((function() {
            var _results1;
            _results1 = [];
            while (column[currentY] !== "empty") {
              if (column[currentY] === "blocked") {
                column[currentY] = "empty";
              } else {
                square = column[currentY];
                column[currentY] = "empty";
                column[nextFreeY] = square;
                nextFreeY -= 1;
              }
              _results1.push(currentY -= 1);
            }
            return _results1;
          })());
        }
        return _results;
      }
    };
    checkLoseCondition = function(gameState, grid) {
      var column, topSquare, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = grid.length; _i < _len; _i++) {
        column = grid[_i];
        topSquare = column[0];
        _results.push(gameState.lost = gameState.lost || topSquare !== "empty");
      }
      return _results;
    };
    return module;
  });

  module("Game", ["Images", "Rendering", "Input", "MainLoop", "Logic", "Graphics"], function(Images, Rendering, Input, MainLoop, Logic, Graphics) {
    return Images.loadImages(["images/star.png"], function(rawImages) {
      var currentInput, display, gameState, images, renderData, renderState;
      images = Images.process(rawImages);
      renderData = {
        "image": images
      };
      Input.preventDefaultFor(["up arrow", "down arrow", "left arrow", "right arrow", "space"]);
      display = Rendering.createDisplay();
      currentInput = Input.createCurrentInput(display);
      gameState = Logic.createGameState();
      renderState = Graphics.createRenderState();
      Logic.initGameState(gameState);
      return MainLoop.execute(function(currentTimeInS, passedTimeInS) {
        if (gameState.reset) {
          gameState = Logic.createGameState();
          Logic.initGameState(gameState);
        }
        Logic.updateGameState(gameState, currentInput, currentTimeInS, passedTimeInS);
        Graphics.updateRenderState(renderState, gameState);
        return Rendering.render(Rendering.drawFunctions, display, renderData, renderState.renderables);
      });
    });
  });

  module("Graphics", ["Rendering", "Camera", "Vec2"], function(Rendering, Camera, Vec2) {
    var appendEndScore, appendGrid, appendNext, appendScore, appendSquare, appendSquares, cellSize, gridSize, module, xMax, xMin, yMax, yMin;
    cellSize = 32;
    gridSize = 9;
    module = {
      createRenderState: function() {
        var renderState;
        return renderState = {
          renderables: []
        };
      },
      updateRenderState: function(renderState, gameState) {
        renderState.renderables.length = 0;
        appendGrid(gameState.grid, renderState.renderables);
        appendSquares(gameState.grid, renderState.renderables);
        appendNext(gameState.next, gameState.grid, renderState.renderables);
        appendScore(gameState.score, gameState.grid, renderState.renderables);
        return appendEndScore(gameState.lost, gameState.score, renderState.renderables);
      }
    };
    appendGrid = function(grid, renderables) {
      var horizontal, vertical, x, y, _results;
      x = xMin(grid);
      while (x <= xMax(grid)) {
        vertical = Rendering.createRenderable("line");
        vertical.resource = {
          color: "rgb(255,255,255)",
          start: [x, yMin(grid)],
          end: [x, yMax(grid)]
        };
        renderables.push(vertical);
        x += cellSize;
      }
      y = yMin(grid);
      _results = [];
      while (y <= yMax(grid)) {
        horizontal = Rendering.createRenderable("line");
        horizontal.resource = {
          color: "rgb(255,255,255)",
          start: [xMin(grid), y],
          end: [xMax(grid), y]
        };
        renderables.push(horizontal);
        _results.push(y += cellSize);
      }
      return _results;
    };
    appendSquares = function(grid, renderables) {
      var square, x, y, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = grid.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = grid[x].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            square = grid[x][y];
            _results1.push(appendSquare(x, y, grid, square, renderables));
          }
          return _results1;
        })());
      }
      return _results;
    };
    appendNext = function(next, grid, renderables) {
      var i, square, _i, _len, _ref, _results;
      _ref = next.squares;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        square = _ref[i];
        _results.push(appendSquare(i + next.offset, -1, grid, square, renderables));
      }
      return _results;
    };
    appendSquare = function(x, y, grid, square, renderables) {
      var margin, renderable;
      margin = 2;
      if (square !== "empty") {
        renderable = Rendering.createRenderable("rectangle");
        renderable.position = [xMin(grid) + x * cellSize + margin, yMin(grid) + y * cellSize + margin];
        renderable.resource = {
          size: [cellSize - margin * 2, cellSize - margin * 2]
        };
        renderable.resource.color = (function() {
          switch (square) {
            case "red":
              return "rgb(255,0,0)";
            case "green":
              return "rgb(0,255,0)";
            case "blocked":
              return "rgb(127,127,127)";
          }
        })();
        return renderables.push(renderable);
      }
    };
    appendScore = function(score, grid, renderables) {
      var renderable;
      renderable = Rendering.createRenderable("text");
      renderable.position = [0, yMax(grid) + 40];
      renderable.resource = {
        string: "" + score,
        textColor: "rgb(255,255,255)",
        centered: [true, false],
        font: "32px Monospace"
      };
      return renderables.push(renderable);
    };
    appendEndScore = function(lost, score, renderables) {
      var box, congratulations, position, resetMessage, scoreMessage, size;
      if (lost) {
        size = [440, 150];
        position = Vec2.copy(size);
        Vec2.scale(position, -0.5);
        box = Rendering.createRenderable("rectangle");
        box.position = position;
        box.resource = {
          color: "rgb(255,255,255)",
          size: size
        };
        congratulations = Rendering.createRenderable("text");
        congratulations.position = [0, -30];
        congratulations.resource = {
          string: "Congratulations!",
          textColor: "rgb(0,0,0)",
          centered: [true, false],
          font: "35px Monospace"
        };
        scoreMessage = Rendering.createRenderable("text");
        scoreMessage.position = [0, 30];
        scoreMessage.resource = {
          string: "You got " + score + " points!",
          textColor: "rgb(0,0,0)",
          centered: [true, false],
          font: "35px Monospace"
        };
        resetMessage = Rendering.createRenderable("text");
        resetMessage.position = [0, 60];
        resetMessage.resource = {
          string: "(press enter to reset)",
          textColor: "rgb(0,0,0)",
          centered: [true, false],
          font: "20px Monospace"
        };
        renderables.push(box);
        renderables.push(congratulations);
        renderables.push(scoreMessage);
        return renderables.push(resetMessage);
      }
    };
    xMin = function(grid) {
      return -grid.length / 2 * cellSize;
    };
    xMax = function(grid) {
      return grid.length / 2 * cellSize;
    };
    yMin = function(grid) {
      return -grid[0].length / 2 * cellSize;
    };
    yMax = function(grid) {
      return grid[0].length / 2 * cellSize;
    };
    return module;
  });

}).call(this);
